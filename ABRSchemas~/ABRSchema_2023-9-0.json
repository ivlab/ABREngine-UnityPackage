{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "abr_state.json",
    "title": "ABR State",
    "description": "This schema formalizes an ABR 'state' which describes a 3D spatial data visualization created with physical, real-world artifacts.",
    "type": "object",

    "required": ["version"],

    "properties": {
        "version": {
            "type": "string",
            "description": "Version of the schema this state was created with - semantic versioning (semver.org). Update the default whenever you update this schema.",
            "default": "2023.9.0"
        },

        "name": {
            "type": "string",
            "description": "Name of this state (e.g. FR14-eve)",
            "default": "Untitled"
        },

        "impressions": {
            "type": "object",
            "description": "The data impressions that a user has created",
            "$comment": "Unfortunately necessary to explicitly specify a UUID here; 'format': 'uuid' doesn't work in patternProperties",
            "patternProperties": {
                "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}$": {"$ref": "#/definitions/Impression"}
            }
        },

        "scene": {
            "type": "object",
            "description": "Any additional info about the scene (lights, camera, transforms, etc.)",
            "properties": {
                "impressionGroups": {
                    "type": "object",
                    "description": "Data impression groups in the scene; each group can have its own transform and bounds. By default, groups will be placed underneath the ABREngine GameObject in the Unity Editor, UNLESS there is already a data impression group of the same name with a DataImpressionGroup script in the scene, in which case that GameObject will be populated by the impressions in this group.",
                    "$comment": "Unfortunately necessary to specify UUID regex here",
                    "patternProperties": {
                        "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}$": { 
                            "type": "object",
                            "required": ["impressions", "uuid", "name"],
                            "properties": {
                                "impressions": {
                                    "type": "array",
                                    "items": { "type": "string", "format": "uuid" }
                                },
                                "uuid": { "type": "string", "format": "uuid" },
                                "name": { "type": "string" },
                                "containerBounds": { "$ref": "#/definitions/UnityObjects/Bounds" },
                                "transformMatrix": { "$ref": "#/definitions/UnityObjects/Matrix4" }
                            }
                        }
                    }
                },
                "lighting": {
                    "type": "array",
                    "maxItems": 3,
                    "items": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [ "Directional", "Point" ]
                            },
                            "name": { "type": "string" },
                            "intensity": { "type": "number" },
                            "position": { "$ref": "#/definitions/UnityObjects/Vector3" },
                            "rotation": { "$ref": "#/definitions/UnityObjects/Quaternion" }
                        }
                    }
                },
                "backgroundColor": {
                    "type": "string",
                    "pattern": "^#[0-9A-Fa-f]{6}$"
                }
            }
        },

        "dataRanges": {
            "type": "object",
            "description": "Ranges for variables in the state (scalar, vector, etc.)",
            "properties": {
                "scalarRanges": {
                    "type": "object",
                    "description": "Ranges for scalar variables. This object contains the global, systemwide definitions for var ranges.",
                    "$comment": "Must explicitly specify DataPath key here",
                    "patternProperties": { 
                        "^([^/]+)\/([^/]+)\/(ScalarVar)\/([^/]+)$": {
                            "type": "object",
                            "description": "Systemwide definition for minimum / maximum of a variable",
                            "required": ["min", "max"],
                            "properties": {
                                "min": { "type": "number" },
                                "max": { "type": "number" }
                            }
                        }
                    }
                },
                "specificScalarRanges": {
                    "type": "object",
                    "description": "Ranges for scalar variables. Custom, per-keydata ranges are specified here.",
                    "$comment": "Must explicitly specify DataPath key here",
                    "patternProperties": { 
                        "^([^/]+)\/([^/]+)\/(KeyData)\/([^/]+)$": {
                            "type": "object",
                            "description": "Definition of minimum / maximum that applies to this key data object only",
                            "patternProperties": {
                                "^([^/]+)\/([^/]+)\/(ScalarVar)\/([^/]+)$": {
                                    "type": "object",
                                    "required": ["min", "max"],
                                        "min": { "type": "number" },
                                        "max": { "type": "number" }
                                }
                            }
                        }
                    }
                }
            }
        },

        "uiData": {
            "type": "object",
            "description": "Any additional info about user interfaces (artist UI, legend UI, physician UI, ...)",
            "properties": {
                "compose": {
                    "type": "object",
                    "description": "Data for the ABR Compose UI",
                    "properties": {
                        "impressionData": {
                            "type": "object",
                            "patternProperties": {
                                "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}$": {
                                    "type": "object",
                                    "properties": {
                                        "position": {
                                            "type": "object",
                                            "description": "Position of this data impression on the browser page",
                                            "properties": {
                                                "x": { "type": "number" },
                                                "y": { "type": "number" }
                                            }
                                        },
                                        "maxInputTierToShow": {
                                            "type": "number",
                                            "minimum": 0,
                                            "maximum": 3
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },

        "localVisAssets": {
            "type": "object",
            "description": "VisAssets that are specific to this state",
            "patternProperties": {
                "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}$":  {"$ref": "#/definitions/LocalVisAsset"}
            }
        },

        "visAssetGradients": {
            "type": "object",
            "description": "Gradients of VisAssets that are stored in the state",
            "patternProperties": {
                "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}$":  {"$ref": "#/definitions/VisAssetGradient"}
            }
        },

        "primitiveGradients": {
            "type": "object",
            "description": "Gradients of Primitives (simple numeric values)",
            "patternProperties": {
                "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}$":  {"$ref": "#/definitions/PrimitiveGradient"}
            }
        }
    },

    "definitions": {
        "Impression": {
            "type": "object",
            "description": "A single data impression (ABR layer) - instantiated version of a plate. By default, data impressions are rendered as a part of an ABR scene. However, it can also be useful to treat data impressions as 'Templates' or 'Styles' that can be used for other data; for example, we might want to apply a particular style to highlighted glyphs vs unhighlighted. Such 'Style' impressions should be tagged with 'Style' and should NOT take any key data. Additionally, data impressions are by default placed in the Unity scene under their parent DataImpressionGroup. HOWEVER, you can manually place data impressions in the Unity scene by providing a GameObject with a matching name and a DataImpression script attached.",
            "required": ["plateType", "uuid"],
            "properties": {
                "plateType": {
                    "type": "string",
                    "description": "What type of data impression is it? (one of the plate types specified in the spec)",
                    "$comment": "Change this when adding a new plate type",
                    "enum": ["Glyphs", "Ribbons", "Surfaces", "Volumes"]
                },
                "uuid": {
                    "format": "uuid",
                    "description": "The unique identifier for this data impression"
                },
                "name": {
                    "type": "string",
                    "description": "User-defined name of the data impression (e.g. 'blue ocean').",
                    "default": "Data Impression"
                },
                "tags": {
                    "type": "array",
                    "description": "User-defined (or system-defined) tags for this data impressions (e.g., 'Style')",
                    "items": { "type": "string" }
                },
                "renderHints": {
                    "type": "object",
                    "description": "Additional data that can/should be used when rendering, such as visibility of the impression",
                    "properties": {
                        "Visible": { "type": "boolean", "default": true }
                    }
                },
                "transformMatrix": {
                    "type": "object",
                    "description": "Local transform of this impression inside its containing data impression group.",
                    "$ref": "#/definitions/UnityObjects/Matrix4"
                },
                "inputValues": {
                    "type": "object",
                    "description": "Input values for this data impression (i.e. Key Data, Colormap, Color Variable, etc.)",
                    "patternProperties": {
                        ".*": { "$ref": "#/definitions/InputValue"}
                    }
                }
            },
            "allOf": [
                {
                    "$comment": "Put all plate types here to ensure state validity",
                    "if": {
                        "properties": { "plateType": { "const": "Glyphs" } }
                    },
                    "then": {
                        "properties": { "inputValues": { "$ref": "#/definitions/Plates/Glyphs" } }
                    }
                },
                {
                    "$comment": "Put all plate types here to ensure state validity",
                    "if": {
                        "properties": { "plateType": { "const": "Ribbons" } }
                    },
                    "then": {
                        "properties": { "inputValues": { "$ref": "#/definitions/Plates/Ribbons" } }
                    }
                },
                {
                    "$comment": "Put all plate types here to ensure state validity",
                    "if": {
                        "properties": { "plateType": { "const": "Surfaces" } }
                    },
                    "then": {
                        "properties": { "inputValues": { "$ref": "#/definitions/Plates/Surfaces" } }
                    }
                },
                {
                    "$comment": "Put all plate types here to ensure state validity",
                    "if": {
                        "properties": { "plateType": { "const": "Volumes" } }
                    },
                    "then": {
                        "properties": { "inputValues": { "$ref": "#/definitions/Plates/Volumes" } }
                    }
                }
            ]
        },

        "InputValue": {
            "type": "object",
            "description": "A single input value for a data impression",
            "required": ["inputValue", "inputType", "inputGenre"],
            "properties": {
                "inputType": {
                    "type": "string",
                    "description": "The type of this input (corresponds to a C# type in ABR)"
                },
                "inputValue": {
                    "type": "string",
                    "description": "Null, UUID, primitive, or resolvable path where the input can be found. Should be a string.",
                    "default": "null"
                },
                "inputGenre": {
                    "type": "string",
                    "description": "Which genre of input (e.g. `Variable`, `VisAsset`, or `Primitive`)",
                    "enum": ["KeyData", "Variable", "VisAsset", "Primitive", "PrimitiveGradient"]
                }
            }
        },

        "LocalVisAsset": {
            "type": "object",
            "description": "A vis asset stored locally in this state (one that has been modified by the user in ABR)",
            "required": ["artifactJson"],
            "properties": {
                "artifactJson": {
                    "$comment": "The json contents of the artifact.json file, with a schema referred to by 'visasset.json' in this folder"
                },
                "artifactDataContents": {
                    "$comment": "Contents of the files listed in artifactJson/artifactData/*, represented in plaintext or base64 encoding. Keys are the filename, values are the string or b64 bytes.",
                    "type": "object"
                }
            }
        },

        "VisAssetGradient": {
            "type": "object",
            "description": "A gradient of VisAssets",
            "properties": {
                "uuid": {
                    "type": "string",
                    "format": "uuid"
                },
                "gradientScale": {
                    "type": "string",
                    "description": "Is it a continuous or discrete gradient?",
                    "enum": ["continuous", "discrete"]
                },
                "gradientType": {
                    "$ref": "#/definitions/VisAssetType",
                    "description": "What are the elements of this gradient? (colormap, glyphs, ...)"
                },
                "points": {
                    "type": "array",
                    "description": "The floating point 'stops' in the gradient. Must be length of `visAssets` - 1",
                    "items": { "type": "number" }
                },
                "visAssets": {
                    "type": "array",
                    "description": "The UUIDs of the VisAssets in the gradient. Must be length of `points` + 1",
                    "items": { "format": "uuid" }
                }
            }
        },

        "PrimitiveGradient": {
            "type": "object",
            "description": "Generic numeric map to be used by styling inputs like opacity, variable glyph size, etc.",
            "properties": {
                "points": {
                    "type": "array",
                    "description": "Control points (percentages 0.0-1.0)",
                    "items": { "type": "number" }
                },
                "values": {
                    "type": "array",
                    "description": "Primitive values at a particular point",
                    "items": {
                        "oneOf": [
                            { "$ref": "#/definitions/InputStringTypes/FloatPrimitive" },
                            { "$ref": "#/definitions/InputStringTypes/PercentPrimitive" },
                            { "$ref": "#/definitions/InputStringTypes/BooleanPrimitive" },
                            { "$ref": "#/definitions/InputStringTypes/LengthPrimitive" },
                            { "$ref": "#/definitions/InputStringTypes/AnglePrimitive" },
                            { "$ref": "#/definitions/InputStringTypes/IntegerPrimitive" }
                        ]
                    }
                }
            }
        },

        "VisAssetType": {
            "type": "string",
            "enum": ["colormap", "glyph", "line", "texture"]
        },

        "InputStringTypes": {
            "Null": {
                "type": "string",
                "pattern": "^null$"
            },

            "UUID": {
                "type": "string",
                "pattern": "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}$"
            },

            "DataPath": {
                "type": "string",
                "$comment": "Update whenever a new data source is added to the data server. Eventually should pull this bit of schema from the data server.",
                "pattern": "^([^/]+)\/([^/]+)\/(KeyData|ScalarVar|VectorVar)\/([^/]+)$"
            },

            "FloatPrimitive": {
                "type": "string",
                "description": "Floating point number",
                "pattern": "^-?\\d+(.\\d+)?$"
            },
            "PercentPrimitive": {
                "type": "string",
                "description": "Floating point percentage",
                "pattern": "^-?\\d+(.\\d+)?(%)$"
            },
            "LengthPrimitive": {
                "type": "string",
                "description": "Floating point distance (metric units)",
                "pattern": "^-?\\d+(.\\d+)?(m)$"
            },
            "BooleanPrimitive": {
                "type": "string",
                "description": "Boolean",
                "pattern": "^(true)|(false)$"
            },
            "AnglePrimitive": {
                "type": "string",
                "description": "Angle measure in degrees",
                "pattern": "^-?\\d+(.\\d+)?(deg)$"
            },
            "IntegerPrimitive": {
                "type": "string",
                "description": "Whole number",
                "pattern": "^-?\\d+$"
            }
        },

        "UnityObjects": {
            "Vector3": {
                "type": "object",
                "required": ["x", "y", "z"],
                "properties": {
                    "x": { "type": "number" },
                    "y": { "type": "number" },
                    "z": { "type": "number" }
                }
            },
            "Quaternion": {
                "type": "object",
                "required": ["x", "y", "z", "w"],
                "properties": {
                    "x": { "type": "number" },
                    "y": { "type": "number" },
                    "z": { "type": "number" },
                    "w": { "type": "number" }
                }
            },
            "Bounds": {
                "type": "object",
                "required": ["center", "extents"],
                "properties": {
                    "center": { "$ref": "#/definitions/UnityObjects/Vector3" },
                    "extents": { "$ref": "#/definitions/UnityObjects/Vector3" }
                }
            },
            "Matrix4": {
                "type": "object",
                "$comment": "NOTE: Unity has different serialization of matrices based on context.   ONE:: When serialized inside another object, they are row-major order where the first row is described by fields 'e00', 'e01', 'e02', 'e02'.  TWO:: When serialized by themselves, matrices are column-major and the first column is described by fields 'm00', 'm10', 'm20', 'm30'. This schema assumes that matrices are serialized BY THEMSELVES and uses method TWO (m00 notation).",
                "required": ["m00", "m10", "m20", "m30",   "m01", "m11", "m21", "m31", "m02", "m12", "m22", "m32", "m03", "m13", "m23", "m33"],
                "properties": {
                    "m00": { "type": "number", "$comment": "Column 0, Row 0"},
                    "m10": { "type": "number", "$comment": "Column 0, Row 1"},
                    "m20": { "type": "number", "$comment": "Column 0, Row 2"},
                    "m30": { "type": "number", "$comment": "Column 0, Row 3"},

                    "m01": { "type": "number", "$comment": "Column 1, Row 0" },
                    "m11": { "type": "number", "$comment": "Column 1, Row 1" },
                    "m21": { "type": "number", "$comment": "Column 1, Row 2" },
                    "m31": { "type": "number", "$comment": "Column 1, Row 3" },

                    "m02": { "type": "number", "$comment": "Column 2, Row 0" },
                    "m12": { "type": "number", "$comment": "Column 2, Row 1" },
                    "m22": { "type": "number", "$comment": "Column 2, Row 2" },
                    "m32": { "type": "number", "$comment": "Column 2, Row 3" },

                    "m03": { "type": "number", "$comment": "Column 3, Row 0" },
                    "m13": { "type": "number", "$comment": "Column 3, Row 1" },
                    "m23": { "type": "number", "$comment": "Column 3, Row 2" },
                    "m33": { "type": "number", "$comment": "Column 3, Row 3" }
                }
            }
        },

        "Plates": {
            "Glyphs": {
                "$comment": "Update Plates whenever you add a new plate type. Inputs should have a `inputType`.",
                "type": "object",
                "description": "Inputs for a field of glyphs",
                "properties": {
                    "Key Data": {
                        "properties": {
                                "inputType": {
                                    "oneOf": [
                                        {"const": "IVLab.ABREngine.PointKeyData" },
                                        {"const": "IVLab.ABREngine.KeyData" }
                                    ]
                                },
                                "inputGenre": { "const": "KeyData" },
                                "inputValue": { "$ref": "#/definitions/InputStringTypes/DataPath" }
                        }
                    },
                    "Color Variable": {
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.ScalarDataVariable" },
                                "inputGenre": { "const": "Variable" },
                                "inputValue": { "$ref": "#/definitions/InputStringTypes/DataPath" }
                        }
                    },
                    "Colormap": {
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.ColormapVisAsset" },
                                "inputGenre": { "const": "VisAsset" },
                                "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "NaN Color": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.ColormapVisAsset" },
                            "inputGenre": { "const": "VisAsset" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "Glyph Variable": {
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.ScalarDataVariable" },
                                "inputGenre": { "const": "Variable" },
                                "inputValue": { "$ref": "#/definitions/InputStringTypes/DataPath" }
                        }
                    },
                    "Glyph": {
                        "properties": {
                            "inputType": {
                                "oneOf": [
                                    { "const": "IVLab.ABREngine.GlyphVisAsset" },
                                    { "const": "IVLab.ABREngine.GlyphGradient" }
                                ]
                            },
                            "inputGenre": { "const": "VisAsset" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "Forward Variable": {
                        "description": "Variable to point glyph 'forward' direction along",
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.VectorDataVariable" },
                                "inputGenre": { "const": "Variable" },
                                "inputValue": { "$ref": "#/definitions/InputStringTypes/DataPath" }
                        }
                    },
                    "Up Variable": {
                        "description": "Variable to point glyph 'up' direction along",
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.VectorDataVariable" },
                                "inputGenre": { "const": "Variable" },
                                "inputValue": { "$ref": "#/definitions/InputStringTypes/DataPath" }
                        }
                    },
                    "Glyph Size": {
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.LengthPrimitive" },
                                "inputGenre": { "const": "Primitive" },
                                "inputValue": { "default": "0.05m", "$ref": "#/definitions/InputStringTypes/LengthPrimitive" }
                        }
                    },
                    "Glyph Density": {
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.PercentPrimitive" },
                                "inputGenre": { "const": "Primitive" },
                                "inputValue": { "default": "100%", "$ref": "#/definitions/InputStringTypes/PercentPrimitive" }
                        }
                    },
                    "Glyph Level Of Detail": {
                        "description": "Level of detail (chunkiness) of glyphs. Generally a number 0-3, lower numbers are higher levels of detail, whereas higher numbers provide better performances.",
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.IntegerPrimitive" },
                                "inputGenre": { "const": "Primitive" },
                                "inputValue": { "default": "1", "$ref": "#/definitions/InputStringTypes/IntegerPrimitive" }
                        }
                    },
                    "Use Random Orientation": {
                        "description": "If no vector orientation variables are provided, use random orientations instead of pointing along a default axis.",
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.BooleanPrimitive" },
                                "inputGenre": { "const": "Primitive" },
                                "inputValue": { "default": "true", "$ref": "#/definitions/InputStringTypes/BooleanPrimitive" }
                        }
                    },
                    "Show Outline": {
                        "description": "Show outlines around the edge of glyphs in this layer.",
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.BooleanPrimitive" },
                                "inputGenre": { "const": "Primitive" },
                                "inputValue": { "default": "false", "$ref": "#/definitions/InputStringTypes/BooleanPrimitive" }
                        }
                    },
                    "Outline Width": {
                        "description": "If 'Show Outline' is true, how wide (in Unity world coordinates) to make the outline",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.LengthPrimitive" },
                            "inputValue": { "default": "0.1m", "$ref": "#/definitions/InputStringTypes/LengthPrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Outline Color": {
                        "description": "Color to make the outline",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.ColormapVisAsset" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" },
                            "inputGenre": { "const": "VisAsset" }
                        }
                    },
                    "Force Outline Color": {
                        "description": "Force the use of `Outline Color` input even if there is a `Colormap` applied to the data.",
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.BooleanPrimitive" },
                                "inputGenre": { "const": "Primitive" },
                                "inputValue": { "default": "false", "$ref": "#/definitions/InputStringTypes/BooleanPrimitive" }
                        }
                    }
                }
            },
            "Ribbons": {
                "$comment": "Update Plates whenever you add a new plate type. Inputs should have a `inputType`.",
                "properties": {
                    "Key Data": {
                        "properties": {
                                "inputType": {
                                    "oneOf": [
                                        {"const": "IVLab.ABREngine.LineKeyData" },
                                        {"const": "IVLab.ABREngine.KeyData" }
                                    ]
                                },
                            "inputGenre": { "const": "KeyData" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/DataPath" }
                        }
                    },
                    "Color Variable": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.ScalarDataVariable" },
                            "inputGenre": { "const": "Variable" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/DataPath" }
                        }
                    },
                    "Colormap": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.ColormapVisAsset" },
                            "inputGenre": { "const": "VisAsset" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "NaN Color": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.ColormapVisAsset" },
                            "inputGenre": { "const": "VisAsset" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "Texture Variable": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.ScalarDataVariable" },
                            "inputGenre": { "const": "Variable" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/DataPath" }
                        }
                    },
                    "Texture": {
                        "properties": {
                            "inputType": {
                                "oneOf": [
                                    { "const": "IVLab.ABREngine.LineTextureVisAsset" },
                                    { "const": "IVLab.ABREngine.LineTextureGradient" }
                                ]
                            },
                            "inputGenre": { "const": "VisAsset" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "NaN Texture": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.SurfaceTextureVisAsset" },
                            "inputGenre": { "const": "VisAsset" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "Texture Cutoff": {
                        "description": "How much of the light part of the line to fill. 0% is black - no fill; 100% is white - fill everything.",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.PercentPrimitive" },
                            "inputValue": { "default": "50%", "$ref": "#/definitions/InputStringTypes/PercentPrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Ribbon Width": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.LengthPrimitive" },
                            "inputValue": { "default": "0.01m", "$ref": "#/definitions/InputStringTypes/LengthPrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Ribbon Rotation": {
                        "description": "How should the ribbons be rotated along their central axis? (degrees)",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.AnglePrimitive" },
                            "inputValue": { "default": "0deg", "$ref": "#/definitions/InputStringTypes/AnglePrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Ribbon Curve": {
                        "description": "How much to curve the ribbons (degrees)",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.AnglePrimitive" },
                            "inputValue": { "default": "0deg", "$ref": "#/definitions/InputStringTypes/AnglePrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Ribbon Brightness": {
                        "description": "Manual brightness adjustment for the ribbons",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.PercentPrimitive" },
                            "inputValue": { "default": "50%", "$ref": "#/definitions/InputStringTypes/PercentPrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Ribbon Smooth": {
                        "description": "How much to smooth the ribbons",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.IntegerPrimitive" },
                            "inputValue": { "default": "5", "$ref": "#/definitions/InputStringTypes/IntegerPrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    }
                }
            },
            "Surfaces": {
                "$comment": "Update Plates whenever you add a new plate type. Inputs should have a `inputType`.",
                "properties": {
                    "Key Data": {
                        "properties": {
                            "inputType": {
                                "oneOf": [
                                    {"const": "IVLab.ABREngine.SurfaceKeyData" },
                                    {"const": "IVLab.ABREngine.KeyData" }
                                ]
                            },
                            "inputGenre": { "const": "KeyData" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/DataPath" }
                        }
                    },
                    "Color Variable": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.ScalarDataVariable" },
                            "inputGenre": { "const": "Variable" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/DataPath" }
                        }
                    },
                    "Colormap": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.ColormapVisAsset" },
                            "inputGenre": { "const": "VisAsset" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "NaN Color": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.ColormapVisAsset" },
                            "inputGenre": { "const": "VisAsset" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "Pattern Variable": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.ScalarDataVariable" },
                            "inputGenre": { "const": "Variable" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/DataPath" }
                        }
                    },
                    "Pattern": {
                        "properties": {
                            "inputType": {
                                "oneOf": [
                                    { "const": "IVLab.ABREngine.SurfaceTextureVisAsset" },
                                    { "const": "IVLab.ABREngine.SurfaceTextureGradient" }
                                ]
                            },
                            "inputGenre": { "const": "VisAsset" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "NaN Pattern": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.SurfaceTextureVisAsset" },
                            "inputGenre": { "const": "VisAsset" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "Pattern Size": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.LengthPrimitive" },
                            "inputValue": { "default": "1m", "$ref": "#/definitions/InputStringTypes/LengthPrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Pattern Seam Blend": {
                        "description": "Blend the seams of the texture together (percent)",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.PercentPrimitive" },
                            "inputValue": { 
                                "$ref": "#/definitions/InputStringTypes/PercentPrimitive",
                                "default": "10%"
                            },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Pattern Saturation": {
                        "description": "Saturation of pattern",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.PercentPrimitive" },
                            "inputValue": { "default": "100%", "$ref": "#/definitions/InputStringTypes/PercentPrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Pattern Intensity": {
                        "description": "How intense to make the pattern (0% = doesn't show up at all, 100% = only the pattern)",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.PercentPrimitive" },
                            "inputValue": { "default": "100%", "$ref": "#/definitions/InputStringTypes/PercentPrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Opacity": {
                        "description": "Opacity (transparency) of the surface. WARNING: may not work 100% correctly. Use with caution.",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.PercentPrimitive" },
                            "inputValue": { "default": "100%", "$ref": "#/definitions/InputStringTypes/PercentPrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Show Outline": {
                        "description": "Show an outline around the edge of this surface",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.BooleanPrimitive" },
                            "inputValue": { "default": "false", "$ref": "#/definitions/InputStringTypes/BooleanPrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Show Only Outline": {
                        "description": "Show ONLY the outline around the edge of this surface (don't show the surface itself)",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.BooleanPrimitive" },
                            "inputValue": { "default": "false", "$ref": "#/definitions/InputStringTypes/BooleanPrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Outline Width": {
                        "description": "If 'Show Outline' is true, how wide (in Unity world coordinates) to make the outline",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.LengthPrimitive" },
                            "inputValue": { "default": "0.1m", "$ref": "#/definitions/InputStringTypes/LengthPrimitive" },
                            "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Outline Color": {
                        "description": "Color to make the outline",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.ColormapVisAsset" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" },
                            "inputGenre": { "const": "VisAsset" }
                        }
                    }
                }
            },
            "Volumes": {
                "$comment": "Update Plates whenever you add a new plate type. Inputs should have a `inputType`.",
                "type": "object",
                "properties": {
                    "Key Data": {
                        "description": "Volume data source.",
                        "properties": {
                                "inputType": {
                                    "oneOf": [
                                        {"const": "IVLab.ABREngine.VolumeKeyData" },
                                        {"const": "IVLab.ABREngine.KeyData" }
                                    ]
                                },
                                "inputGenre": { "const": "KeyData" },
                                "inputValue": { "$ref": "#/definitions/InputStringTypes/DataPath" }
                        }
                    },
                    "Color Variable": {
                        "description": "Scalar values that make up the volume.",
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.ScalarDataVariable" },
                                "inputGenre": { "const": "Variable" },
                                "inputValue": { "$ref": "#/definitions/InputStringTypes/DataPath" }
                        }
                    },
                    "Colormap": {
                        "description": "Defines the color of the volume at control points along its scalar range.",
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.ColormapVisAsset" },
                                "inputGenre": { "const": "VisAsset" },
                                "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "NaN Color": {
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.ColormapVisAsset" },
                            "inputGenre": { "const": "VisAsset" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "Opacitymap": {
                        "description": "Defines the opacity of the volume at control points along its scalar range.",
                        "properties": {
                            "inputType": { "const": "IVLab.ABREngine.PrimitiveGradient" },
                            "inputGenre": { "const": "PrimitiveGradient" },
                            "inputValue": { "$ref": "#/definitions/InputStringTypes/UUID" }
                        }
                    },
                    "NaN Opacity": {
                        "description": "Make NaN values have this opacity",
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.PercentPrimitive" },
                                "inputValue": { "default": "0%", "$ref": "#/definitions/InputStringTypes/PercentPrimitive" },
                                "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Volume Brightness": {
                        "description": "Manual brightness adjustment for the volume",
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.PercentPrimitive" },
                                "inputValue": { "default": "50%", "$ref": "#/definitions/InputStringTypes/PercentPrimitive" },
                                "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Volume Opacity Multiplier": {
                        "description": "How opaque the volume should appear. 0% - fully transparent; 100% - fully opaque.",
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.PercentPrimitive" },
                                "inputValue": { "default": "10%", "$ref": "#/definitions/InputStringTypes/PercentPrimitive" },
                                "inputGenre": { "const": "Primitive" }
                        }
                    },
                    "Volume Lighting": {
                        "description": "Whether or not the volume should react to lighting.",
                        "properties": {
                                "inputType": { "const": "IVLab.ABREngine.BooleanPrimitive" },
                                "inputValue": { "default": "true", "$ref": "#/definitions/InputStringTypes/BooleanPrimitive" },
                                "inputGenre": { "const": "Primitive" }
                        }
                    }
                }
            }
        }
    }
}
